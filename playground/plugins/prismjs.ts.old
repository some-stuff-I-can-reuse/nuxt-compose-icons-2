// import PrismTreeview from 'node_modules/prismjs/plugins/treeview/prism-treeview.min.js';
import { default as loadLanguages, default as Prism } from 'prismjs';
import '../assets/prism/prism.css';
import '../assets/prism/treeview/prism-treeview.css';

export default defineNuxtPlugin(() => {
  if (!window) return;

  // Prism.manual = true;

  loadLanguages(['markup', 'css', 'javascript', 'svg', 'bash', 'json', 'typescript']);
  Prism.languages = ['markup', 'css', 'javascript', 'svg', 'bash', 'json', 'typescript'];

  Prism.languages.treeview = {
    'treeview-part': {
      pattern: /(^|\n).+/,
      inside: {
        'entry-line': [
          {
            pattern: /\|-- |├── /,
            alias: 'line-h',
          },
          {
            pattern: /\|   |│   /,
            alias: 'line-v',
          },
          {
            pattern: /`-- |└── /,
            alias: 'line-v-last',
          },
          {
            pattern: / {4}/,
            alias: 'line-v-gap',
          },
        ],
        'entry-name': {
          pattern: /.*\S.*/,
          inside: {
            // symlink
            operator: / -> /,
          },
        },
      },
    },
  };

  Prism.hooks.add('wrap', function (env) {
    if (env.language === 'treeview') {
      // Remove line breaks
      if (env.type === 'treeview-part') {
        env.content = env.content.replace(/\n/g, '') + '<br />';
      }
      if (env.type === 'entry-name') {
        if (/(^|[^\\])\/\s*$/.test(env.content)) {
          env.content = env.content.slice(0, -1);
          // This is a folder
          env.classes.push('dir');
        } else {
          if (/(^|[^\\])[=*|]\s*$/.test(env.content)) {
            env.content = env.content.slice(0, -1);
          }

          var parts = env.content.toLowerCase().split('.');
          while (parts.length > 1) {
            parts.shift();
            // Ex. 'foo.min.js' would become '<span class="token keyword ext-min-js ext-js">foo.min.js</span>'
            env.classes.push('ext-' + parts.join('-'));
          }

          if (env.content.charAt(0) === '.') {
            env.classes.push('dotfile');
          }
        }
      }
    }
  });

  // PrismTreeview();
  Prism.plugins = {
    lineNumbers: true,
    treeview: true,
    'line-highlight': true,
    'line-numbers': true,
    'show-language': true,
    'copy-to-clipboard': true,
    toolbar: true,
    'match-braces': true,
  };

  Prism.highlightAll();
  return {
    provide: {
      prism: Prism,
    },
  };
});
